{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Practical AI","text":"<p>This repository contains educational material on practical AI. The goal is to provide a collection of small self-contained educational units (bits) that can be combined to create a more comprehensive understanding of AI.</p> <p>You can create own path through the bits by following the links in the README.md files of the bits.</p>"},{"location":"#bits","title":"Bits","text":"<ul> <li>Python Environment</li> </ul>"},{"location":"#contribution","title":"Contribution","text":"<p>If you want to contribute to this project, please follow the guidelines below:</p> <ol> <li>Create a new folder for your bit. The folder name should be a short description of the bit.</li> <li>Add a README.md file to the folder. The README should contain the following information:<ul> <li>A brief description of the bit.</li> <li>A list of prerequisites (if any). It can be link to other bits.</li> <li>A list of resources (if any). It can be links to articles, videos, etc.</li> <li>A list of exercises. Each exercise should have practical tasks that the reader can do to understand the bit better.</li> <li>A list of related bits.</li> </ul> </li> <li>Add a link to the bit in the README.md file of the bits folder.</li> <li>Create a pull request.</li> <li>Once the pull request is approved, the bit will be merged into the main branch.</li> </ol>"},{"location":"bits/eng-1-python-env/","title":"Python Environment","text":"<p>layout: default title: Practical AI :: Python Environment</p>"},{"location":"bits/eng-1-python-env/#python-environment","title":"Python Environment","text":"<p>This bit provides instructions on how to set up a Python environment on your local machine.</p>"},{"location":"bits/eng-1-python-env/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic knowledge of using the command line interface (CLI).</li> <li>A computer with an internet connection.</li> <li>Administrative privileges to install software on your machine.</li> </ul>"},{"location":"bits/eng-1-python-env/#resources","title":"Resources","text":"<p>First go Installation guide to install Python and then learn how to use Virtual Environment.</p>"},{"location":"bits/eng-1-python-env/#exercises","title":"Exercises","text":"<ol> <li>Check if Python is already installed on your machine.</li> <li>Download and install Python on your machine.</li> <li>Run the Python installer.</li> <li>Verify the installation by checking the Python version.</li> <li>Create a virtual environment for your Python project.</li> <li>Activate the virtual environment.</li> </ol>"},{"location":"bits/eng-1-python-env/#additional-resources","title":"Additional Resources","text":"<ul> <li>Python Installation Guide</li> <li>Python Virtual Environment Tutorial</li> </ul>"},{"location":"bits/eng-1-python-env/installation/","title":"Installation","text":"<p>layout: default title: Practical AI :: Installing Python</p>"},{"location":"bits/eng-1-python-env/installation/#installing-python-a-step-by-step-guide","title":"Installing Python: A Step-by-Step Guide","text":"<p>This guide will help you install Python on your system. Please follow the instructions specific to your operating system.</p>"},{"location":"bits/eng-1-python-env/installation/#determine-the-latest-stable-python-version","title":"Determine the Latest Stable Python Version","text":"<p>Before installing Python, check the Python release cycle to determine the current stable version.</p>"},{"location":"bits/eng-1-python-env/installation/#windows-installation","title":"Windows Installation","text":""},{"location":"bits/eng-1-python-env/installation/#step-1-check-if-python-is-already-installed","title":"Step 1: Check if Python is Already Installed","text":"<ol> <li>Open Command Prompt:<ul> <li>Press <code>Win + R</code>, type <code>cmd</code>, and press Enter.</li> </ul> </li> <li> <p>Check Python Version:</p> <p><code>bash python --version</code></p> <ul> <li>If Python is installed, it will display a version number (e.g., Python 3.9.7).</li> <li>If you receive an error or need a different version, proceed to Step 2.</li> </ul> </li> </ol>"},{"location":"bits/eng-1-python-env/installation/#step-2-download-python","title":"Step 2: Download Python","text":"<ol> <li>Visit the Official Python Website:<ul> <li>Go to python.org/downloads/windows.</li> </ul> </li> <li>Select the Latest Stable Release:<ul> <li>Choose the latest Python 3.x release that matches your system architecture (32-bit or 64-bit).</li> </ul> </li> <li>Download the Installer:<ul> <li>Click on the executable installer link (e.g., Windows installer (64-bit)).</li> </ul> </li> </ol>"},{"location":"bits/eng-1-python-env/installation/#step-3-install-python","title":"Step 3: Install Python","text":"<ol> <li>Run the Installer:<ul> <li>Locate the downloaded file (e.g., <code>python-3.x.x-amd64.exe</code>) in your Downloads folder.</li> <li>Double-click the installer to launch it.</li> </ul> </li> <li>Customize Installation Options:<ul> <li>Important: Check the box that says \u201cAdd Python 3.x to PATH\u201d at the bottom of the setup window.</li> <li>Click on \u201cInstall Now\u201d for a default installation.</li> </ul> </li> <li>Follow the Setup Wizard:<ul> <li>If prompted by User Account Control, click \u201cYes\u201d to allow the installer to make changes.</li> <li>Wait for the installation to complete.</li> </ul> </li> <li>Complete Installation:<ul> <li>Click \u201cClose\u201d to exit the setup wizard.</li> </ul> </li> </ol>"},{"location":"bits/eng-1-python-env/installation/#step-4-verify-the-installation","title":"Step 4: Verify the Installation","text":"<ol> <li>Open a New Command Prompt Window:<ul> <li>This ensures the PATH changes take effect.</li> </ul> </li> <li>Check Python Version:     <code>python --version</code></li> <li>You should see the Python version you installed (e.g., Python 3.9.7).</li> </ol>"},{"location":"bits/eng-1-python-env/installation/#macos-installation","title":"MacOS Installation","text":""},{"location":"bits/eng-1-python-env/installation/#step-1-check-if-python-is-already-installed_1","title":"Step 1: Check if Python is Already Installed","text":"<ol> <li>Open Terminal:     \u2022   Go to <code>Finder &gt; Applications &gt; Utilities &gt; Terminal</code>.</li> <li>Check Python Version:     <code>python     python3 --version</code></li> <li>If Python 3.x is installed, it will display the version number.</li> <li>If you need Python 3.x or a different version, proceed to Step 2.</li> </ol>"},{"location":"bits/eng-1-python-env/installation/#step-2-download-python_1","title":"Step 2: Download Python","text":"<ol> <li>Visit the Official Python Website:</li> <li>Go to https://python.org/downloads/macos.</li> <li>Download the Installer:</li> <li>Click on the latest Python 3.x macOS 64-bit universal2 installer (e.g., <code>python-3.x.x-macos11.pkg</code>).</li> </ol>"},{"location":"bits/eng-1-python-env/installation/#step-3-install-python_1","title":"Step 3: Install Python","text":"<ol> <li>Run the Installer:</li> <li>Locate the downloaded .pkg file in your Downloads folder.</li> <li>Double-click the installer to launch it.</li> <li>Follow the Installation Steps:<ul> <li>Click \u201cContinue\u201d through the introduction and license agreement.</li> <li>Click \u201cAgree\u201d to accept the license terms.</li> <li>Click \u201cInstall\u201d to begin the installation.</li> <li>Enter your administrator password if prompted.</li> </ul> </li> <li>Complete Installation:<ul> <li>Once the installation is successful, click \u201cClose\u201d.</li> </ul> </li> </ol>"},{"location":"bits/eng-1-python-env/installation/#alternative-installation-using-homebrewhttpsbrewsh","title":"Alternative Installation Using [Homebrew](https://brew.sh/","text":"<p>If you prefer using a package manager, you can install Python via Homebrew.</p> <ol> <li>Install Homebrew (if not already installed):</li> <li>Update Homebrew:     <code>bash     brew update</code></li> <li>Install Python 3:     <code>brew install python</code></li> <li>Verify the Installation:     <code>bash     python3 --version</code></li> </ol>"},{"location":"bits/eng-1-python-env/installation/#step-4-verify-the-installation_1","title":"Step 4: Verify the Installation","text":"<ol> <li>Open a New Terminal Window.</li> <li>Check Python Version:     <code>bash     python3 --version</code></li> <li>You should see the Python version you installed.</li> </ol>"},{"location":"bits/eng-1-python-env/installation/#additional-notes","title":"Additional Notes","text":"<ul> <li>Environment Variables (Windows):</li> <li>If you forgot to add Python to the PATH during installation, you can add it manually:<ol> <li>Go to Control Panel &gt; System and Security &gt; System.</li> <li>Click on Advanced system settings.</li> <li>Click Environment Variables.</li> <li>Under System Variables, find and select Path, then click Edit.</li> <li>Click New and add the path to your Python installation (e.g., C:\\Python39).</li> </ol> </li> <li>Using python3 vs. python:</li> <li>On MacOS and Linux, use python3 to ensure you\u2019re using Python 3.x, since python may point to Python 2.x.</li> <li>Installing <code>pip</code>:</li> <li><code>pip</code> is the package installer for Python and is included by default in Python 3.4 and above.</li> <li> <p>Verify Pip installation:</p> <p><code>bash pip3 --version</code>   - If Pip is not installed, go to https://pip.pypa.io/en/stable/installation/ for installation instructions.</p> </li> </ul>"},{"location":"bits/eng-1-python-env/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Virtual Environment: Learn how to create isolated Python environments for your projects.</li> </ul>"},{"location":"bits/eng-1-python-env/virtual-environment/","title":"Virtual environment","text":"<p>layout: default title: Practical AI :: Configure Python Virtual Environment</p>"},{"location":"bits/eng-1-python-env/virtual-environment/#configure-python-virtual-environment","title":"Configure Python Virtual Environment","text":"<p>Creating a <code>virtual environment</code> for your Python project is a best practice. It allows you to manage project-specific dependencies without affecting other projects or the global Python installation. This ensures consistency across different development and production environments.</p> <p>This guide will walk you through setting up a virtual environment using venv, which is included in the Python Standard Library for Python 3.3 and newer.</p>"},{"location":"bits/eng-1-python-env/virtual-environment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.3 or newer installed on your system.</li> <li>Command Prompt (Windows) or Terminal (macOS/Linux) access.</li> <li>Basic knowledge of navigating the command line.</li> </ul>"},{"location":"bits/eng-1-python-env/virtual-environment/#windows-instructions","title":"Windows Instructions","text":""},{"location":"bits/eng-1-python-env/virtual-environment/#step-1-create-a-virtual-environment","title":"Step 1: Create a Virtual Environment","text":"<ol> <li> <p>Open Command Prompt:</p> <ul> <li>Press <code>Win + R</code>, type <code>cmd</code>, and press Enter.</li> </ul> </li> <li> <p>Navigate to Your Project Directory:</p> <ul> <li> <p>Use the <code>cd</code> command to change directories:</p> <p><code>bash cd path\\to\\your\\project</code></p> </li> </ul> </li> <li> <p>Create the Virtual Environment:</p> <ul> <li> <p>Run the following command:</p> <p><code>bash python -m venv .venv</code></p> </li> <li> <p>This creates a directory named <code>.venv</code> in your project folder.</p> </li> <li>The <code>.venv</code> directory contains the Python executable and a local copy of the pip package manager.</li> </ul> </li> </ol>"},{"location":"bits/eng-1-python-env/virtual-environment/#step-2-activate-the-virtual-environment","title":"Step 2: Activate the Virtual Environment","text":"<ol> <li> <p>Activate:</p> <ul> <li> <p>Run the activation script:</p> <p><code>bash .venv\\Scripts\\activate</code></p> </li> <li> <p>You should see (.venv) at the beginning of your command prompt line, indicating that the virtual environment is active.</p> </li> </ul> </li> <li> <p>[Optional] Verify Python Interpreter:</p> <ul> <li> <p>Check that you\u2019re using the virtual environment\u2019s Python interpreter:</p> <p><code>bash where python</code></p> </li> </ul> <p>\u2022   The path should point to your project\u2019s .venv directory.</p> </li> <li> <p>Install Packages:</p> <ul> <li> <p>You can now install packages using pip:</p> <p><code>bash pip install package_name</code></p> </li> </ul> </li> </ol>"},{"location":"bits/eng-1-python-env/virtual-environment/#step-3-deactivate-the-virtual-environment","title":"Step 3: Deactivate the Virtual Environment","text":"<ol> <li> <p>Deactivate:</p> <ul> <li> <p>To exit the virtual environment, simply run:</p> <p><code>bash deactivate</code></p> </li> <li> <p>The (.venv) prefix should disappear from your command prompt.</p> </li> </ul> </li> </ol>"},{"location":"bits/eng-1-python-env/virtual-environment/#macos-instructions","title":"MacOS Instructions","text":""},{"location":"bits/eng-1-python-env/virtual-environment/#step-1-create-a-virtual-environment_1","title":"Step 1: Create a Virtual Environment","text":"<ol> <li>Open Terminal:<ul> <li>Navigate to <code>Finder &gt; Applications &gt; Utilities &gt; Terminal</code></li> </ul> </li> <li> <p>Navigate to Your Project Directory:</p> <ul> <li> <p>Use the <code>cd</code> command to change directories:</p> <p><code>bash cd /path/to/your/project</code></p> </li> </ul> </li> <li> <p>Create the Virtual Environment:</p> <ul> <li> <p>Run the following command:</p> <p><code>bash python3 -m venv .venv</code></p> </li> </ul> </li> <li> <p>This creates a directory named <code>.venv</code> in your project folder.</p> </li> <li>The <code>.venv</code> directory contains the Python executable and a local copy of the pip package manager.</li> </ol>"},{"location":"bits/eng-1-python-env/virtual-environment/#step-2-activate-the-virtual-environment_1","title":"Step 2: Activate the Virtual Environment","text":"<ol> <li> <p>Activate:</p> <ul> <li> <p>Run the activation script:</p> <p><code>bash source venv/bin/activate</code></p> </li> <li> <p>You should see (.venv) at the beginning of your terminal prompt, indicating that the virtual environment is active.</p> </li> </ul> </li> <li> <p>[Optional] Verify Python Interpreter:</p> <ul> <li> <p>Check that you\u2019re using the virtual environment\u2019s Python interpreter:</p> <p><code>bash which python</code></p> </li> <li> <p>The path should point to your project\u2019s <code>.venv</code> directory.</p> </li> </ul> </li> <li> <p>Install Packages:</p> <ul> <li> <p>You can now install packages using pip:</p> <p><code>bash pip install package_name</code></p> </li> </ul> </li> </ol>"},{"location":"bits/eng-1-python-env/virtual-environment/#step-3-deactivate-the-virtual-environment_1","title":"Step 3: Deactivate the Virtual Environment","text":"<ol> <li> <p>Deactivate:</p> <ul> <li> <p>To exit the virtual environment, simply run:     <code>bash     deactivate</code></p> </li> <li> <p>The <code>(.venv)</code> prefix should disappear from your terminal prompt.</p> </li> </ul> </li> </ol>"},{"location":"bits/eng-1-python-env/virtual-environment/#additional-notes","title":"Additional Notes","text":"<ul> <li>Why Use a Virtual Environment?</li> <li>Isolates project-specific dependencies.</li> <li>Prevents conflicts between packages required for different projects.</li> <li>Simplifies dependency management and deployment.</li> <li>Naming the Virtual Environment Directory</li> <li> <p>You can name the virtual environment directory anything you like. Common names include venv, env, or .venv.</p> </li> <li> <p>Using python vs. python3</p> </li> <li>On macOS and Linux, the python command might point to Python 2.x.</li> <li> <p>Use python3 to ensure you\u2019re using Python 3.x.</p> </li> <li> <p>Upgrading pip</p> </li> <li> <p>After activating your virtual environment, upgrade pip to the latest version:</p> <p><code>bash pip install --upgrade pip</code></p> </li> <li> <p>Creating a Requirements File</p> <ul> <li> <p>To export your project\u2019s dependencies:</p> <p><code>bash pip freeze &gt; requirements.txt</code>     - To install dependencies from a requirements.txt file:</p> <p><code>bash pip install -r requirements.txt</code>     - This is simple txt file with all the dependencies listed in it. It can be written manually or exported from the virtual environment.</p> </li> </ul> </li> <li> <p>Virtual Environment in Version Control</p> </li> <li> <p>Generally, you should exclude the <code>.venv</code> directory from version control systems like Git.</p> <ul> <li>Add <code>.venv/</code> to your <code>.gitignore</code> file.</li> </ul> </li> <li> <p>Deleting a Virtual Environment</p> </li> <li> <p>To remove a virtual environment, simply delete the <code>.venv</code> directory</p> </li> <li> <p>Alternative Virtual Environment Tools</p> </li> <li><code>Virtualenv</code> - An older tool that provides similar functionality and supports</li> <li><code>Poetry</code> - A tool for dependency management and packaging in Python. </li> <li><code>Pipenv</code> - Combines pip and virtualenv into a single tool for dependency management.</li> </ul>"}]}